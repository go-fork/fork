// Code generated by mockery. DO NOT EDIT.

package fork_mocks

import (
	http "net/http"

	context "go.fork.vn/fork/context"

	mock "github.com/stretchr/testify/mock"
)

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// HandleFunc provides a mock function with given fields: method, path, handler
func (_m *MockAdapter) HandleFunc(method string, path string, handler func(context.Context)) {
	_m.Called(method, path, handler)
}

// MockAdapter_HandleFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleFunc'
type MockAdapter_HandleFunc_Call struct {
	*mock.Call
}

// HandleFunc is a helper method to define mock.On call
//   - method string
//   - path string
//   - handler func(context.Context)
func (_e *MockAdapter_Expecter) HandleFunc(method interface{}, path interface{}, handler interface{}) *MockAdapter_HandleFunc_Call {
	return &MockAdapter_HandleFunc_Call{Call: _e.mock.On("HandleFunc", method, path, handler)}
}

func (_c *MockAdapter_HandleFunc_Call) Run(run func(method string, path string, handler func(context.Context))) *MockAdapter_HandleFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(func(context.Context)))
	})
	return _c
}

func (_c *MockAdapter_HandleFunc_Call) Return() *MockAdapter_HandleFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdapter_HandleFunc_Call) RunAndReturn(run func(string, string, func(context.Context))) *MockAdapter_HandleFunc_Call {
	_c.Run(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockAdapter) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAdapter_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockAdapter_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockAdapter_Expecter) Name() *MockAdapter_Name_Call {
	return &MockAdapter_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockAdapter_Name_Call) Run(run func()) *MockAdapter_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdapter_Name_Call) Return(_a0 string) *MockAdapter_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Name_Call) RunAndReturn(run func() string) *MockAdapter_Name_Call {
	_c.Call.Return(run)
	return _c
}

// RunTLS provides a mock function with given fields: certFile, keyFile
func (_m *MockAdapter) RunTLS(certFile string, keyFile string) error {
	ret := _m.Called(certFile, keyFile)

	if len(ret) == 0 {
		panic("no return value specified for RunTLS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(certFile, keyFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_RunTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTLS'
type MockAdapter_RunTLS_Call struct {
	*mock.Call
}

// RunTLS is a helper method to define mock.On call
//   - certFile string
//   - keyFile string
func (_e *MockAdapter_Expecter) RunTLS(certFile interface{}, keyFile interface{}) *MockAdapter_RunTLS_Call {
	return &MockAdapter_RunTLS_Call{Call: _e.mock.On("RunTLS", certFile, keyFile)}
}

func (_c *MockAdapter_RunTLS_Call) Run(run func(certFile string, keyFile string)) *MockAdapter_RunTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAdapter_RunTLS_Call) Return(_a0 error) *MockAdapter_RunTLS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_RunTLS_Call) RunAndReturn(run func(string, string) error) *MockAdapter_RunTLS_Call {
	_c.Call.Return(run)
	return _c
}

// Serve provides a mock function with no fields
func (_m *MockAdapter) Serve() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Serve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Serve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serve'
type MockAdapter_Serve_Call struct {
	*mock.Call
}

// Serve is a helper method to define mock.On call
func (_e *MockAdapter_Expecter) Serve() *MockAdapter_Serve_Call {
	return &MockAdapter_Serve_Call{Call: _e.mock.On("Serve")}
}

func (_c *MockAdapter_Serve_Call) Run(run func()) *MockAdapter_Serve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdapter_Serve_Call) Return(_a0 error) *MockAdapter_Serve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Serve_Call) RunAndReturn(run func() error) *MockAdapter_Serve_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: w, r
func (_m *MockAdapter) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// MockAdapter_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockAdapter_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockAdapter_Expecter) ServeHTTP(w interface{}, r interface{}) *MockAdapter_ServeHTTP_Call {
	return &MockAdapter_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, r)}
}

func (_c *MockAdapter_ServeHTTP_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockAdapter_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockAdapter_ServeHTTP_Call) Return() *MockAdapter_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdapter_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockAdapter_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// SetHandler provides a mock function with given fields: handler
func (_m *MockAdapter) SetHandler(handler http.Handler) {
	_m.Called(handler)
}

// MockAdapter_SetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandler'
type MockAdapter_SetHandler_Call struct {
	*mock.Call
}

// SetHandler is a helper method to define mock.On call
//   - handler http.Handler
func (_e *MockAdapter_Expecter) SetHandler(handler interface{}) *MockAdapter_SetHandler_Call {
	return &MockAdapter_SetHandler_Call{Call: _e.mock.On("SetHandler", handler)}
}

func (_c *MockAdapter_SetHandler_Call) Run(run func(handler http.Handler)) *MockAdapter_SetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Handler))
	})
	return _c
}

func (_c *MockAdapter_SetHandler_Call) Return() *MockAdapter_SetHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdapter_SetHandler_Call) RunAndReturn(run func(http.Handler)) *MockAdapter_SetHandler_Call {
	_c.Run(run)
	return _c
}

// Shutdown provides a mock function with no fields
func (_m *MockAdapter) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockAdapter_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockAdapter_Expecter) Shutdown() *MockAdapter_Shutdown_Call {
	return &MockAdapter_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockAdapter_Shutdown_Call) Run(run func()) *MockAdapter_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdapter_Shutdown_Call) Return(_a0 error) *MockAdapter_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Shutdown_Call) RunAndReturn(run func() error) *MockAdapter_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: middleware
func (_m *MockAdapter) Use(middleware func(context.Context)) {
	_m.Called(middleware)
}

// MockAdapter_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockAdapter_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - middleware func(context.Context)
func (_e *MockAdapter_Expecter) Use(middleware interface{}) *MockAdapter_Use_Call {
	return &MockAdapter_Use_Call{Call: _e.mock.On("Use", middleware)}
}

func (_c *MockAdapter_Use_Call) Run(run func(middleware func(context.Context))) *MockAdapter_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(context.Context)))
	})
	return _c
}

func (_c *MockAdapter_Use_Call) Return() *MockAdapter_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAdapter_Use_Call) RunAndReturn(run func(func(context.Context))) *MockAdapter_Use_Call {
	_c.Run(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
