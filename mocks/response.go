// Code generated by mockery. DO NOT EDIT.

package fork_mocks

import (
	bufio "bufio"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	net "net"
)

// MockResponse is an autogenerated mock type for the Response type
type MockResponse struct {
	mock.Mock
}

type MockResponse_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResponse) EXPECT() *MockResponse_Expecter {
	return &MockResponse_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with no fields
func (_m *MockResponse) Flush() {
	_m.Called()
}

// MockResponse_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockResponse_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Flush() *MockResponse_Flush_Call {
	return &MockResponse_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockResponse_Flush_Call) Run(run func()) *MockResponse_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Flush_Call) Return() *MockResponse_Flush_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponse_Flush_Call) RunAndReturn(run func()) *MockResponse_Flush_Call {
	_c.Run(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *MockResponse) Header() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockResponse_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockResponse_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Header() *MockResponse_Header_Call {
	return &MockResponse_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockResponse_Header_Call) Run(run func()) *MockResponse_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Header_Call) Return(_a0 http.Header) *MockResponse_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResponse_Header_Call) RunAndReturn(run func() http.Header) *MockResponse_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Hijack provides a mock function with no fields
func (_m *MockResponse) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hijack")
	}

	var r0 net.Conn
	var r1 *bufio.ReadWriter
	var r2 error
	if rf, ok := ret.Get(0).(func() (net.Conn, *bufio.ReadWriter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func() *bufio.ReadWriter); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bufio.ReadWriter)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockResponse_Hijack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hijack'
type MockResponse_Hijack_Call struct {
	*mock.Call
}

// Hijack is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Hijack() *MockResponse_Hijack_Call {
	return &MockResponse_Hijack_Call{Call: _e.mock.On("Hijack")}
}

func (_c *MockResponse_Hijack_Call) Run(run func()) *MockResponse_Hijack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Hijack_Call) Return(_a0 net.Conn, _a1 *bufio.ReadWriter, _a2 error) *MockResponse_Hijack_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockResponse_Hijack_Call) RunAndReturn(run func() (net.Conn, *bufio.ReadWriter, error)) *MockResponse_Hijack_Call {
	_c.Call.Return(run)
	return _c
}

// Pusher provides a mock function with no fields
func (_m *MockResponse) Pusher() (http.Pusher, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pusher")
	}

	var r0 http.Pusher
	var r1 bool
	if rf, ok := ret.Get(0).(func() (http.Pusher, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() http.Pusher); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Pusher)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockResponse_Pusher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pusher'
type MockResponse_Pusher_Call struct {
	*mock.Call
}

// Pusher is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Pusher() *MockResponse_Pusher_Call {
	return &MockResponse_Pusher_Call{Call: _e.mock.On("Pusher")}
}

func (_c *MockResponse_Pusher_Call) Run(run func()) *MockResponse_Pusher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Pusher_Call) Return(_a0 http.Pusher, _a1 bool) *MockResponse_Pusher_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResponse_Pusher_Call) RunAndReturn(run func() (http.Pusher, bool)) *MockResponse_Pusher_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: w
func (_m *MockResponse) Reset(w http.ResponseWriter) {
	_m.Called(w)
}

// MockResponse_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockResponse_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - w http.ResponseWriter
func (_e *MockResponse_Expecter) Reset(w interface{}) *MockResponse_Reset_Call {
	return &MockResponse_Reset_Call{Call: _e.mock.On("Reset", w)}
}

func (_c *MockResponse_Reset_Call) Run(run func(w http.ResponseWriter)) *MockResponse_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter))
	})
	return _c
}

func (_c *MockResponse_Reset_Call) Return() *MockResponse_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponse_Reset_Call) RunAndReturn(run func(http.ResponseWriter)) *MockResponse_Reset_Call {
	_c.Run(run)
	return _c
}

// ResponseWriter provides a mock function with no fields
func (_m *MockResponse) ResponseWriter() http.ResponseWriter {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResponseWriter")
	}

	var r0 http.ResponseWriter
	if rf, ok := ret.Get(0).(func() http.ResponseWriter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.ResponseWriter)
		}
	}

	return r0
}

// MockResponse_ResponseWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResponseWriter'
type MockResponse_ResponseWriter_Call struct {
	*mock.Call
}

// ResponseWriter is a helper method to define mock.On call
func (_e *MockResponse_Expecter) ResponseWriter() *MockResponse_ResponseWriter_Call {
	return &MockResponse_ResponseWriter_Call{Call: _e.mock.On("ResponseWriter")}
}

func (_c *MockResponse_ResponseWriter_Call) Run(run func()) *MockResponse_ResponseWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_ResponseWriter_Call) Return(_a0 http.ResponseWriter) *MockResponse_ResponseWriter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResponse_ResponseWriter_Call) RunAndReturn(run func() http.ResponseWriter) *MockResponse_ResponseWriter_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockResponse) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockResponse_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockResponse_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Size() *MockResponse_Size_Call {
	return &MockResponse_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockResponse_Size_Call) Run(run func()) *MockResponse_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Size_Call) Return(_a0 int) *MockResponse_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResponse_Size_Call) RunAndReturn(run func() int) *MockResponse_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockResponse) Status() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockResponse_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockResponse_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Status() *MockResponse_Status_Call {
	return &MockResponse_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockResponse_Status_Call) Run(run func()) *MockResponse_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Status_Call) Return(_a0 int) *MockResponse_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResponse_Status_Call) RunAndReturn(run func() int) *MockResponse_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: data
func (_m *MockResponse) Write(data []byte) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResponse_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockResponse_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - data []byte
func (_e *MockResponse_Expecter) Write(data interface{}) *MockResponse_Write_Call {
	return &MockResponse_Write_Call{Call: _e.mock.On("Write", data)}
}

func (_c *MockResponse_Write_Call) Run(run func(data []byte)) *MockResponse_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockResponse_Write_Call) Return(_a0 int, _a1 error) *MockResponse_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResponse_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockResponse_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteHeader provides a mock function with given fields: code
func (_m *MockResponse) WriteHeader(code int) {
	_m.Called(code)
}

// MockResponse_WriteHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteHeader'
type MockResponse_WriteHeader_Call struct {
	*mock.Call
}

// WriteHeader is a helper method to define mock.On call
//   - code int
func (_e *MockResponse_Expecter) WriteHeader(code interface{}) *MockResponse_WriteHeader_Call {
	return &MockResponse_WriteHeader_Call{Call: _e.mock.On("WriteHeader", code)}
}

func (_c *MockResponse_WriteHeader_Call) Run(run func(code int)) *MockResponse_WriteHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockResponse_WriteHeader_Call) Return() *MockResponse_WriteHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponse_WriteHeader_Call) RunAndReturn(run func(int)) *MockResponse_WriteHeader_Call {
	_c.Run(run)
	return _c
}

// Written provides a mock function with no fields
func (_m *MockResponse) Written() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Written")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockResponse_Written_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Written'
type MockResponse_Written_Call struct {
	*mock.Call
}

// Written is a helper method to define mock.On call
func (_e *MockResponse_Expecter) Written() *MockResponse_Written_Call {
	return &MockResponse_Written_Call{Call: _e.mock.On("Written")}
}

func (_c *MockResponse_Written_Call) Run(run func()) *MockResponse_Written_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResponse_Written_Call) Return(_a0 bool) *MockResponse_Written_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResponse_Written_Call) RunAndReturn(run func() bool) *MockResponse_Written_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResponse creates a new instance of MockResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponse(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponse {
	mock := &MockResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
