// Code generated by mockery. DO NOT EDIT.

package fork_mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	router "go.fork.vn/fork/router"
)

// MockRouter is an autogenerated mock type for the Router type
type MockRouter struct {
	mock.Mock
}

type MockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouter) EXPECT() *MockRouter_Expecter {
	return &MockRouter_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: method, path
func (_m *MockRouter) Find(method string, path string) router.HandlerFunc {
	ret := _m.Called(method, path)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 router.HandlerFunc
	if rf, ok := ret.Get(0).(func(string, string) router.HandlerFunc); ok {
		r0 = rf(method, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(router.HandlerFunc)
		}
	}

	return r0
}

// MockRouter_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockRouter_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - method string
//   - path string
func (_e *MockRouter_Expecter) Find(method interface{}, path interface{}) *MockRouter_Find_Call {
	return &MockRouter_Find_Call{Call: _e.mock.On("Find", method, path)}
}

func (_c *MockRouter_Find_Call) Run(run func(method string, path string)) *MockRouter_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRouter_Find_Call) Return(_a0 router.HandlerFunc) *MockRouter_Find_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Find_Call) RunAndReturn(run func(string, string) router.HandlerFunc) *MockRouter_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields: prefix
func (_m *MockRouter) Group(prefix string) router.Router {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 router.Router
	if rf, ok := ret.Get(0).(func(string) router.Router); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(router.Router)
		}
	}

	return r0
}

// MockRouter_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type MockRouter_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - prefix string
func (_e *MockRouter_Expecter) Group(prefix interface{}) *MockRouter_Group_Call {
	return &MockRouter_Group_Call{Call: _e.mock.On("Group", prefix)}
}

func (_c *MockRouter_Group_Call) Run(run func(prefix string)) *MockRouter_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRouter_Group_Call) Return(_a0 router.Router) *MockRouter_Group_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Group_Call) RunAndReturn(run func(string) router.Router) *MockRouter_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: method, path, handlers
func (_m *MockRouter) Handle(method string, path string, handlers ...router.HandlerFunc) {
	_va := make([]interface{}, len(handlers))
	for _i := range handlers {
		_va[_i] = handlers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, method, path)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockRouter_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockRouter_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - method string
//   - path string
//   - handlers ...router.HandlerFunc
func (_e *MockRouter_Expecter) Handle(method interface{}, path interface{}, handlers ...interface{}) *MockRouter_Handle_Call {
	return &MockRouter_Handle_Call{Call: _e.mock.On("Handle",
		append([]interface{}{method, path}, handlers...)...)}
}

func (_c *MockRouter_Handle_Call) Run(run func(method string, path string, handlers ...router.HandlerFunc)) *MockRouter_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]router.HandlerFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(router.HandlerFunc)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Handle_Call) Return() *MockRouter_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Handle_Call) RunAndReturn(run func(string, string, ...router.HandlerFunc)) *MockRouter_Handle_Call {
	_c.Run(run)
	return _c
}

// Routes provides a mock function with no fields
func (_m *MockRouter) Routes() []router.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routes")
	}

	var r0 []router.Route
	if rf, ok := ret.Get(0).(func() []router.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]router.Route)
		}
	}

	return r0
}

// MockRouter_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type MockRouter_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
func (_e *MockRouter_Expecter) Routes() *MockRouter_Routes_Call {
	return &MockRouter_Routes_Call{Call: _e.mock.On("Routes")}
}

func (_c *MockRouter_Routes_Call) Run(run func()) *MockRouter_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_Routes_Call) Return(_a0 []router.Route) *MockRouter_Routes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_Routes_Call) RunAndReturn(run func() []router.Route) *MockRouter_Routes_Call {
	_c.Call.Return(run)
	return _c
}

// ServeHTTP provides a mock function with given fields: w, req
func (_m *MockRouter) ServeHTTP(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// MockRouter_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockRouter_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *MockRouter_Expecter) ServeHTTP(w interface{}, req interface{}) *MockRouter_ServeHTTP_Call {
	return &MockRouter_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", w, req)}
}

func (_c *MockRouter_ServeHTTP_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *MockRouter_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockRouter_ServeHTTP_Call) Return() *MockRouter_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockRouter_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// Static provides a mock function with given fields: prefix, root
func (_m *MockRouter) Static(prefix string, root string) {
	_m.Called(prefix, root)
}

// MockRouter_Static_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Static'
type MockRouter_Static_Call struct {
	*mock.Call
}

// Static is a helper method to define mock.On call
//   - prefix string
//   - root string
func (_e *MockRouter_Expecter) Static(prefix interface{}, root interface{}) *MockRouter_Static_Call {
	return &MockRouter_Static_Call{Call: _e.mock.On("Static", prefix, root)}
}

func (_c *MockRouter_Static_Call) Run(run func(prefix string, root string)) *MockRouter_Static_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRouter_Static_Call) Return() *MockRouter_Static_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Static_Call) RunAndReturn(run func(string, string)) *MockRouter_Static_Call {
	_c.Run(run)
	return _c
}

// Use provides a mock function with given fields: middleware
func (_m *MockRouter) Use(middleware ...router.HandlerFunc) {
	_va := make([]interface{}, len(middleware))
	for _i := range middleware {
		_va[_i] = middleware[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockRouter_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockRouter_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - middleware ...router.HandlerFunc
func (_e *MockRouter_Expecter) Use(middleware ...interface{}) *MockRouter_Use_Call {
	return &MockRouter_Use_Call{Call: _e.mock.On("Use",
		append([]interface{}{}, middleware...)...)}
}

func (_c *MockRouter_Use_Call) Run(run func(middleware ...router.HandlerFunc)) *MockRouter_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]router.HandlerFunc, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(router.HandlerFunc)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockRouter_Use_Call) Return() *MockRouter_Use_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRouter_Use_Call) RunAndReturn(run func(...router.HandlerFunc)) *MockRouter_Use_Call {
	_c.Run(run)
	return _c
}

// NewMockRouter creates a new instance of MockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouter {
	mock := &MockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
