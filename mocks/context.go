// Code generated by mockery. DO NOT EDIT.

package fork_mocks

import (
	context2 "context"

	context "go.fork.vn/fork/context"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	time "time"

	validator "github.com/go-playground/validator/v10"
)

// MockContext is an autogenerated mock type for the Context type
type MockContext struct {
	mock.Mock
}

type MockContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContext) EXPECT() *MockContext_Expecter {
	return &MockContext_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with no fields
func (_m *MockContext) Abort() {
	_m.Called()
}

// MockContext_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type MockContext_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
func (_e *MockContext_Expecter) Abort() *MockContext_Abort_Call {
	return &MockContext_Abort_Call{Call: _e.mock.On("Abort")}
}

func (_c *MockContext_Abort_Call) Run(run func()) *MockContext_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Abort_Call) Return() *MockContext_Abort_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Abort_Call) RunAndReturn(run func()) *MockContext_Abort_Call {
	_c.Run(run)
	return _c
}

// Bind provides a mock function with given fields: obj
func (_m *MockContext) Bind(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Bind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockContext_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) Bind(obj interface{}) *MockContext_Bind_Call {
	return &MockContext_Bind_Call{Call: _e.mock.On("Bind", obj)}
}

func (_c *MockContext_Bind_Call) Run(run func(obj interface{})) *MockContext_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_Bind_Call) Return(_a0 error) *MockContext_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Bind_Call) RunAndReturn(run func(interface{}) error) *MockContext_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// BindAndValidate provides a mock function with given fields: obj
func (_m *MockContext) BindAndValidate(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindAndValidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_BindAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindAndValidate'
type MockContext_BindAndValidate_Call struct {
	*mock.Call
}

// BindAndValidate is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) BindAndValidate(obj interface{}) *MockContext_BindAndValidate_Call {
	return &MockContext_BindAndValidate_Call{Call: _e.mock.On("BindAndValidate", obj)}
}

func (_c *MockContext_BindAndValidate_Call) Run(run func(obj interface{})) *MockContext_BindAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_BindAndValidate_Call) Return(_a0 error) *MockContext_BindAndValidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_BindAndValidate_Call) RunAndReturn(run func(interface{}) error) *MockContext_BindAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// BindForm provides a mock function with given fields: obj
func (_m *MockContext) BindForm(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindForm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_BindForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindForm'
type MockContext_BindForm_Call struct {
	*mock.Call
}

// BindForm is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) BindForm(obj interface{}) *MockContext_BindForm_Call {
	return &MockContext_BindForm_Call{Call: _e.mock.On("BindForm", obj)}
}

func (_c *MockContext_BindForm_Call) Run(run func(obj interface{})) *MockContext_BindForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_BindForm_Call) Return(_a0 error) *MockContext_BindForm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_BindForm_Call) RunAndReturn(run func(interface{}) error) *MockContext_BindForm_Call {
	_c.Call.Return(run)
	return _c
}

// BindJSON provides a mock function with given fields: obj
func (_m *MockContext) BindJSON(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_BindJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindJSON'
type MockContext_BindJSON_Call struct {
	*mock.Call
}

// BindJSON is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) BindJSON(obj interface{}) *MockContext_BindJSON_Call {
	return &MockContext_BindJSON_Call{Call: _e.mock.On("BindJSON", obj)}
}

func (_c *MockContext_BindJSON_Call) Run(run func(obj interface{})) *MockContext_BindJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_BindJSON_Call) Return(_a0 error) *MockContext_BindJSON_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_BindJSON_Call) RunAndReturn(run func(interface{}) error) *MockContext_BindJSON_Call {
	_c.Call.Return(run)
	return _c
}

// BindQuery provides a mock function with given fields: obj
func (_m *MockContext) BindQuery(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindQuery")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_BindQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindQuery'
type MockContext_BindQuery_Call struct {
	*mock.Call
}

// BindQuery is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) BindQuery(obj interface{}) *MockContext_BindQuery_Call {
	return &MockContext_BindQuery_Call{Call: _e.mock.On("BindQuery", obj)}
}

func (_c *MockContext_BindQuery_Call) Run(run func(obj interface{})) *MockContext_BindQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_BindQuery_Call) Return(_a0 error) *MockContext_BindQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_BindQuery_Call) RunAndReturn(run func(interface{}) error) *MockContext_BindQuery_Call {
	_c.Call.Return(run)
	return _c
}

// BindXML provides a mock function with given fields: obj
func (_m *MockContext) BindXML(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for BindXML")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_BindXML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindXML'
type MockContext_BindXML_Call struct {
	*mock.Call
}

// BindXML is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) BindXML(obj interface{}) *MockContext_BindXML_Call {
	return &MockContext_BindXML_Call{Call: _e.mock.On("BindXML", obj)}
}

func (_c *MockContext_BindXML_Call) Run(run func(obj interface{})) *MockContext_BindXML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_BindXML_Call) Return(_a0 error) *MockContext_BindXML_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_BindXML_Call) RunAndReturn(run func(interface{}) error) *MockContext_BindXML_Call {
	_c.Call.Return(run)
	return _c
}

// Blob provides a mock function with given fields: code, contentType, data
func (_m *MockContext) Blob(code int, contentType string, data []byte) {
	_m.Called(code, contentType, data)
}

// MockContext_Blob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Blob'
type MockContext_Blob_Call struct {
	*mock.Call
}

// Blob is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - data []byte
func (_e *MockContext_Expecter) Blob(code interface{}, contentType interface{}, data interface{}) *MockContext_Blob_Call {
	return &MockContext_Blob_Call{Call: _e.mock.On("Blob", code, contentType, data)}
}

func (_c *MockContext_Blob_Call) Run(run func(code int, contentType string, data []byte)) *MockContext_Blob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockContext_Blob_Call) Return() *MockContext_Blob_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Blob_Call) RunAndReturn(run func(int, string, []byte)) *MockContext_Blob_Call {
	_c.Run(run)
	return _c
}

// ClientIP provides a mock function with no fields
func (_m *MockContext) ClientIP() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientIP")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_ClientIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientIP'
type MockContext_ClientIP_Call struct {
	*mock.Call
}

// ClientIP is a helper method to define mock.On call
func (_e *MockContext_Expecter) ClientIP() *MockContext_ClientIP_Call {
	return &MockContext_ClientIP_Call{Call: _e.mock.On("ClientIP")}
}

func (_c *MockContext_ClientIP_Call) Run(run func()) *MockContext_ClientIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_ClientIP_Call) Return(_a0 string) *MockContext_ClientIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ClientIP_Call) RunAndReturn(run func() string) *MockContext_ClientIP_Call {
	_c.Call.Return(run)
	return _c
}

// ContentType provides a mock function with no fields
func (_m *MockContext) ContentType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContentType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_ContentType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContentType'
type MockContext_ContentType_Call struct {
	*mock.Call
}

// ContentType is a helper method to define mock.On call
func (_e *MockContext_Expecter) ContentType() *MockContext_ContentType_Call {
	return &MockContext_ContentType_Call{Call: _e.mock.On("ContentType")}
}

func (_c *MockContext_ContentType_Call) Run(run func()) *MockContext_ContentType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_ContentType_Call) Return(_a0 string) *MockContext_ContentType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ContentType_Call) RunAndReturn(run func() string) *MockContext_ContentType_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with no fields
func (_m *MockContext) Context() context2.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context2.Context
	if rf, ok := ret.Get(0).(func() context2.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context2.Context)
		}
	}

	return r0
}

// MockContext_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockContext_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockContext_Expecter) Context() *MockContext_Context_Call {
	return &MockContext_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockContext_Context_Call) Run(run func()) *MockContext_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Context_Call) Return(_a0 context2.Context) *MockContext_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Context_Call) RunAndReturn(run func() context2.Context) *MockContext_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: name
func (_m *MockContext) Cookie(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContext_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type MockContext_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) Cookie(name interface{}) *MockContext_Cookie_Call {
	return &MockContext_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *MockContext_Cookie_Call) Run(run func(name string)) *MockContext_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_Cookie_Call) Return(_a0 string, _a1 error) *MockContext_Cookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_Cookie_Call) RunAndReturn(run func(string) (string, error)) *MockContext_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function with no fields
func (_m *MockContext) Cookies() []*http.Cookie {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// MockContext_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type MockContext_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *MockContext_Expecter) Cookies() *MockContext_Cookies_Call {
	return &MockContext_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *MockContext_Cookies_Call) Run(run func()) *MockContext_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Cookies_Call) Return(_a0 []*http.Cookie) *MockContext_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *MockContext_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultForm provides a mock function with given fields: name, defaultValue
func (_m *MockContext) DefaultForm(name string, defaultValue string) string {
	ret := _m.Called(name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for DefaultForm")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_DefaultForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultForm'
type MockContext_DefaultForm_Call struct {
	*mock.Call
}

// DefaultForm is a helper method to define mock.On call
//   - name string
//   - defaultValue string
func (_e *MockContext_Expecter) DefaultForm(name interface{}, defaultValue interface{}) *MockContext_DefaultForm_Call {
	return &MockContext_DefaultForm_Call{Call: _e.mock.On("DefaultForm", name, defaultValue)}
}

func (_c *MockContext_DefaultForm_Call) Run(run func(name string, defaultValue string)) *MockContext_DefaultForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContext_DefaultForm_Call) Return(_a0 string) *MockContext_DefaultForm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_DefaultForm_Call) RunAndReturn(run func(string, string) string) *MockContext_DefaultForm_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultQuery provides a mock function with given fields: name, defaultValue
func (_m *MockContext) DefaultQuery(name string, defaultValue string) string {
	ret := _m.Called(name, defaultValue)

	if len(ret) == 0 {
		panic("no return value specified for DefaultQuery")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_DefaultQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultQuery'
type MockContext_DefaultQuery_Call struct {
	*mock.Call
}

// DefaultQuery is a helper method to define mock.On call
//   - name string
//   - defaultValue string
func (_e *MockContext_Expecter) DefaultQuery(name interface{}, defaultValue interface{}) *MockContext_DefaultQuery_Call {
	return &MockContext_DefaultQuery_Call{Call: _e.mock.On("DefaultQuery", name, defaultValue)}
}

func (_c *MockContext_DefaultQuery_Call) Run(run func(name string, defaultValue string)) *MockContext_DefaultQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContext_DefaultQuery_Call) Return(_a0 string) *MockContext_DefaultQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_DefaultQuery_Call) RunAndReturn(run func(string, string) string) *MockContext_DefaultQuery_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: err
func (_m *MockContext) Error(err error) {
	_m.Called(err)
}

// MockContext_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockContext_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - err error
func (_e *MockContext_Expecter) Error(err interface{}) *MockContext_Error_Call {
	return &MockContext_Error_Call{Call: _e.mock.On("Error", err)}
}

func (_c *MockContext_Error_Call) Run(run func(err error)) *MockContext_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockContext_Error_Call) Return() *MockContext_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Error_Call) RunAndReturn(run func(error)) *MockContext_Error_Call {
	_c.Run(run)
	return _c
}

// File provides a mock function with given fields: filepath
func (_m *MockContext) File(filepath string) {
	_m.Called(filepath)
}

// MockContext_File_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'File'
type MockContext_File_Call struct {
	*mock.Call
}

// File is a helper method to define mock.On call
//   - filepath string
func (_e *MockContext_Expecter) File(filepath interface{}) *MockContext_File_Call {
	return &MockContext_File_Call{Call: _e.mock.On("File", filepath)}
}

func (_c *MockContext_File_Call) Run(run func(filepath string)) *MockContext_File_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_File_Call) Return() *MockContext_File_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_File_Call) RunAndReturn(run func(string)) *MockContext_File_Call {
	_c.Run(run)
	return _c
}

// FileAttachment provides a mock function with given fields: filepath, filename
func (_m *MockContext) FileAttachment(filepath string, filename string) {
	_m.Called(filepath, filename)
}

// MockContext_FileAttachment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileAttachment'
type MockContext_FileAttachment_Call struct {
	*mock.Call
}

// FileAttachment is a helper method to define mock.On call
//   - filepath string
//   - filename string
func (_e *MockContext_Expecter) FileAttachment(filepath interface{}, filename interface{}) *MockContext_FileAttachment_Call {
	return &MockContext_FileAttachment_Call{Call: _e.mock.On("FileAttachment", filepath, filename)}
}

func (_c *MockContext_FileAttachment_Call) Run(run func(filepath string, filename string)) *MockContext_FileAttachment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContext_FileAttachment_Call) Return() *MockContext_FileAttachment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_FileAttachment_Call) RunAndReturn(run func(string, string)) *MockContext_FileAttachment_Call {
	_c.Run(run)
	return _c
}

// Form provides a mock function with given fields: name
func (_m *MockContext) Form(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Form")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_Form_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Form'
type MockContext_Form_Call struct {
	*mock.Call
}

// Form is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) Form(name interface{}) *MockContext_Form_Call {
	return &MockContext_Form_Call{Call: _e.mock.On("Form", name)}
}

func (_c *MockContext_Form_Call) Run(run func(name string)) *MockContext_Form_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_Form_Call) Return(_a0 string) *MockContext_Form_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Form_Call) RunAndReturn(run func(string) string) *MockContext_Form_Call {
	_c.Call.Return(run)
	return _c
}

// FormArray provides a mock function with given fields: name
func (_m *MockContext) FormArray(name string) []string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockContext_FormArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormArray'
type MockContext_FormArray_Call struct {
	*mock.Call
}

// FormArray is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) FormArray(name interface{}) *MockContext_FormArray_Call {
	return &MockContext_FormArray_Call{Call: _e.mock.On("FormArray", name)}
}

func (_c *MockContext_FormArray_Call) Run(run func(name string)) *MockContext_FormArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_FormArray_Call) Return(_a0 []string) *MockContext_FormArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_FormArray_Call) RunAndReturn(run func(string) []string) *MockContext_FormArray_Call {
	_c.Call.Return(run)
	return _c
}

// FormFile provides a mock function with given fields: name
func (_m *MockContext) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormFile")
	}

	var r0 *multipart.FileHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*multipart.FileHeader, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContext_FormFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormFile'
type MockContext_FormFile_Call struct {
	*mock.Call
}

// FormFile is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) FormFile(name interface{}) *MockContext_FormFile_Call {
	return &MockContext_FormFile_Call{Call: _e.mock.On("FormFile", name)}
}

func (_c *MockContext_FormFile_Call) Run(run func(name string)) *MockContext_FormFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_FormFile_Call) Return(_a0 *multipart.FileHeader, _a1 error) *MockContext_FormFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_FormFile_Call) RunAndReturn(run func(string) (*multipart.FileHeader, error)) *MockContext_FormFile_Call {
	_c.Call.Return(run)
	return _c
}

// FormMap provides a mock function with given fields: prefix
func (_m *MockContext) FormMap(prefix string) map[string]string {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for FormMap")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockContext_FormMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormMap'
type MockContext_FormMap_Call struct {
	*mock.Call
}

// FormMap is a helper method to define mock.On call
//   - prefix string
func (_e *MockContext_Expecter) FormMap(prefix interface{}) *MockContext_FormMap_Call {
	return &MockContext_FormMap_Call{Call: _e.mock.On("FormMap", prefix)}
}

func (_c *MockContext_FormMap_Call) Run(run func(prefix string)) *MockContext_FormMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_FormMap_Call) Return(_a0 map[string]string) *MockContext_FormMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_FormMap_Call) RunAndReturn(run func(string) map[string]string) *MockContext_FormMap_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockContext) Get(key string) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockContext_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockContext_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) Get(key interface{}) *MockContext_Get_Call {
	return &MockContext_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockContext_Get_Call) Run(run func(key string)) *MockContext_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_Get_Call) Return(_a0 interface{}, _a1 bool) *MockContext_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_Get_Call) RunAndReturn(run func(string) (interface{}, bool)) *MockContext_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBool provides a mock function with given fields: key
func (_m *MockContext) GetBool(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBool")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContext_GetBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBool'
type MockContext_GetBool_Call struct {
	*mock.Call
}

// GetBool is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetBool(key interface{}) *MockContext_GetBool_Call {
	return &MockContext_GetBool_Call{Call: _e.mock.On("GetBool", key)}
}

func (_c *MockContext_GetBool_Call) Run(run func(key string)) *MockContext_GetBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetBool_Call) Return(_a0 bool) *MockContext_GetBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetBool_Call) RunAndReturn(run func(string) bool) *MockContext_GetBool_Call {
	_c.Call.Return(run)
	return _c
}

// GetDuration provides a mock function with given fields: key
func (_m *MockContext) GetDuration(key string) time.Duration {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetDuration")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockContext_GetDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDuration'
type MockContext_GetDuration_Call struct {
	*mock.Call
}

// GetDuration is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetDuration(key interface{}) *MockContext_GetDuration_Call {
	return &MockContext_GetDuration_Call{Call: _e.mock.On("GetDuration", key)}
}

func (_c *MockContext_GetDuration_Call) Run(run func(key string)) *MockContext_GetDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetDuration_Call) Return(_a0 time.Duration) *MockContext_GetDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetDuration_Call) RunAndReturn(run func(string) time.Duration) *MockContext_GetDuration_Call {
	_c.Call.Return(run)
	return _c
}

// GetFloat64 provides a mock function with given fields: key
func (_m *MockContext) GetFloat64(key string) float64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetFloat64")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(string) float64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockContext_GetFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFloat64'
type MockContext_GetFloat64_Call struct {
	*mock.Call
}

// GetFloat64 is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetFloat64(key interface{}) *MockContext_GetFloat64_Call {
	return &MockContext_GetFloat64_Call{Call: _e.mock.On("GetFloat64", key)}
}

func (_c *MockContext_GetFloat64_Call) Run(run func(key string)) *MockContext_GetFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetFloat64_Call) Return(_a0 float64) *MockContext_GetFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetFloat64_Call) RunAndReturn(run func(string) float64) *MockContext_GetFloat64_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeader provides a mock function with given fields: key
func (_m *MockContext) GetHeader(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetHeader")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_GetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeader'
type MockContext_GetHeader_Call struct {
	*mock.Call
}

// GetHeader is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetHeader(key interface{}) *MockContext_GetHeader_Call {
	return &MockContext_GetHeader_Call{Call: _e.mock.On("GetHeader", key)}
}

func (_c *MockContext_GetHeader_Call) Run(run func(key string)) *MockContext_GetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetHeader_Call) Return(_a0 string) *MockContext_GetHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetHeader_Call) RunAndReturn(run func(string) string) *MockContext_GetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt provides a mock function with given fields: key
func (_m *MockContext) GetInt(key string) int {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockContext_GetInt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt'
type MockContext_GetInt_Call struct {
	*mock.Call
}

// GetInt is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetInt(key interface{}) *MockContext_GetInt_Call {
	return &MockContext_GetInt_Call{Call: _e.mock.On("GetInt", key)}
}

func (_c *MockContext_GetInt_Call) Run(run func(key string)) *MockContext_GetInt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetInt_Call) Return(_a0 int) *MockContext_GetInt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetInt_Call) RunAndReturn(run func(string) int) *MockContext_GetInt_Call {
	_c.Call.Return(run)
	return _c
}

// GetInt64 provides a mock function with given fields: key
func (_m *MockContext) GetInt64(key string) int64 {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetInt64")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockContext_GetInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInt64'
type MockContext_GetInt64_Call struct {
	*mock.Call
}

// GetInt64 is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetInt64(key interface{}) *MockContext_GetInt64_Call {
	return &MockContext_GetInt64_Call{Call: _e.mock.On("GetInt64", key)}
}

func (_c *MockContext_GetInt64_Call) Run(run func(key string)) *MockContext_GetInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetInt64_Call) Return(_a0 int64) *MockContext_GetInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetInt64_Call) RunAndReturn(run func(string) int64) *MockContext_GetInt64_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawData provides a mock function with no fields
func (_m *MockContext) GetRawData() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawData")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContext_GetRawData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawData'
type MockContext_GetRawData_Call struct {
	*mock.Call
}

// GetRawData is a helper method to define mock.On call
func (_e *MockContext_Expecter) GetRawData() *MockContext_GetRawData_Call {
	return &MockContext_GetRawData_Call{Call: _e.mock.On("GetRawData")}
}

func (_c *MockContext_GetRawData_Call) Run(run func()) *MockContext_GetRawData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_GetRawData_Call) Return(_a0 []byte, _a1 error) *MockContext_GetRawData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_GetRawData_Call) RunAndReturn(run func() ([]byte, error)) *MockContext_GetRawData_Call {
	_c.Call.Return(run)
	return _c
}

// GetString provides a mock function with given fields: key
func (_m *MockContext) GetString(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_GetString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetString'
type MockContext_GetString_Call struct {
	*mock.Call
}

// GetString is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetString(key interface{}) *MockContext_GetString_Call {
	return &MockContext_GetString_Call{Call: _e.mock.On("GetString", key)}
}

func (_c *MockContext_GetString_Call) Run(run func(key string)) *MockContext_GetString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetString_Call) Return(_a0 string) *MockContext_GetString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetString_Call) RunAndReturn(run func(string) string) *MockContext_GetString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMap provides a mock function with given fields: key
func (_m *MockContext) GetStringMap(key string) map[string]interface{} {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMap")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockContext_GetStringMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMap'
type MockContext_GetStringMap_Call struct {
	*mock.Call
}

// GetStringMap is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetStringMap(key interface{}) *MockContext_GetStringMap_Call {
	return &MockContext_GetStringMap_Call{Call: _e.mock.On("GetStringMap", key)}
}

func (_c *MockContext_GetStringMap_Call) Run(run func(key string)) *MockContext_GetStringMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetStringMap_Call) Return(_a0 map[string]interface{}) *MockContext_GetStringMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetStringMap_Call) RunAndReturn(run func(string) map[string]interface{}) *MockContext_GetStringMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringMapString provides a mock function with given fields: key
func (_m *MockContext) GetStringMapString(key string) map[string]string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringMapString")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockContext_GetStringMapString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringMapString'
type MockContext_GetStringMapString_Call struct {
	*mock.Call
}

// GetStringMapString is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetStringMapString(key interface{}) *MockContext_GetStringMapString_Call {
	return &MockContext_GetStringMapString_Call{Call: _e.mock.On("GetStringMapString", key)}
}

func (_c *MockContext_GetStringMapString_Call) Run(run func(key string)) *MockContext_GetStringMapString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetStringMapString_Call) Return(_a0 map[string]string) *MockContext_GetStringMapString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetStringMapString_Call) RunAndReturn(run func(string) map[string]string) *MockContext_GetStringMapString_Call {
	_c.Call.Return(run)
	return _c
}

// GetStringSlice provides a mock function with given fields: key
func (_m *MockContext) GetStringSlice(key string) []string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetStringSlice")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockContext_GetStringSlice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStringSlice'
type MockContext_GetStringSlice_Call struct {
	*mock.Call
}

// GetStringSlice is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetStringSlice(key interface{}) *MockContext_GetStringSlice_Call {
	return &MockContext_GetStringSlice_Call{Call: _e.mock.On("GetStringSlice", key)}
}

func (_c *MockContext_GetStringSlice_Call) Run(run func(key string)) *MockContext_GetStringSlice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetStringSlice_Call) Return(_a0 []string) *MockContext_GetStringSlice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetStringSlice_Call) RunAndReturn(run func(string) []string) *MockContext_GetStringSlice_Call {
	_c.Call.Return(run)
	return _c
}

// GetTime provides a mock function with given fields: key
func (_m *MockContext) GetTime(key string) time.Time {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockContext_GetTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTime'
type MockContext_GetTime_Call struct {
	*mock.Call
}

// GetTime is a helper method to define mock.On call
//   - key string
func (_e *MockContext_Expecter) GetTime(key interface{}) *MockContext_GetTime_Call {
	return &MockContext_GetTime_Call{Call: _e.mock.On("GetTime", key)}
}

func (_c *MockContext_GetTime_Call) Run(run func(key string)) *MockContext_GetTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_GetTime_Call) Return(_a0 time.Time) *MockContext_GetTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetTime_Call) RunAndReturn(run func(string) time.Time) *MockContext_GetTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidator provides a mock function with no fields
func (_m *MockContext) GetValidator() *validator.Validate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValidator")
	}

	var r0 *validator.Validate
	if rf, ok := ret.Get(0).(func() *validator.Validate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validator.Validate)
		}
	}

	return r0
}

// MockContext_GetValidator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidator'
type MockContext_GetValidator_Call struct {
	*mock.Call
}

// GetValidator is a helper method to define mock.On call
func (_e *MockContext_Expecter) GetValidator() *MockContext_GetValidator_Call {
	return &MockContext_GetValidator_Call{Call: _e.mock.On("GetValidator")}
}

func (_c *MockContext_GetValidator_Call) Run(run func()) *MockContext_GetValidator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_GetValidator_Call) Return(_a0 *validator.Validate) *MockContext_GetValidator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_GetValidator_Call) RunAndReturn(run func() *validator.Validate) *MockContext_GetValidator_Call {
	_c.Call.Return(run)
	return _c
}

// HTML provides a mock function with given fields: code, html
func (_m *MockContext) HTML(code int, html string) {
	_m.Called(code, html)
}

// MockContext_HTML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTML'
type MockContext_HTML_Call struct {
	*mock.Call
}

// HTML is a helper method to define mock.On call
//   - code int
//   - html string
func (_e *MockContext_Expecter) HTML(code interface{}, html interface{}) *MockContext_HTML_Call {
	return &MockContext_HTML_Call{Call: _e.mock.On("HTML", code, html)}
}

func (_c *MockContext_HTML_Call) Run(run func(code int, html string)) *MockContext_HTML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockContext_HTML_Call) Return() *MockContext_HTML_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_HTML_Call) RunAndReturn(run func(int, string)) *MockContext_HTML_Call {
	_c.Run(run)
	return _c
}

// Handlers provides a mock function with no fields
func (_m *MockContext) Handlers() []func(context.Context) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Handlers")
	}

	var r0 []func(context.Context)
	if rf, ok := ret.Get(0).(func() []func(context.Context)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]func(context.Context))
		}
	}

	return r0
}

// MockContext_Handlers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handlers'
type MockContext_Handlers_Call struct {
	*mock.Call
}

// Handlers is a helper method to define mock.On call
func (_e *MockContext_Expecter) Handlers() *MockContext_Handlers_Call {
	return &MockContext_Handlers_Call{Call: _e.mock.On("Handlers")}
}

func (_c *MockContext_Handlers_Call) Run(run func()) *MockContext_Handlers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Handlers_Call) Return(_a0 []func(context.Context)) *MockContext_Handlers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Handlers_Call) RunAndReturn(run func() []func(context.Context)) *MockContext_Handlers_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields: key, value
func (_m *MockContext) Header(key string, value string) {
	_m.Called(key, value)
}

// MockContext_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockContext_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
//   - key string
//   - value string
func (_e *MockContext_Expecter) Header(key interface{}, value interface{}) *MockContext_Header_Call {
	return &MockContext_Header_Call{Call: _e.mock.On("Header", key, value)}
}

func (_c *MockContext_Header_Call) Run(run func(key string, value string)) *MockContext_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockContext_Header_Call) Return() *MockContext_Header_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Header_Call) RunAndReturn(run func(string, string)) *MockContext_Header_Call {
	_c.Run(run)
	return _c
}

// IsAborted provides a mock function with no fields
func (_m *MockContext) IsAborted() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsAborted")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContext_IsAborted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAborted'
type MockContext_IsAborted_Call struct {
	*mock.Call
}

// IsAborted is a helper method to define mock.On call
func (_e *MockContext_Expecter) IsAborted() *MockContext_IsAborted_Call {
	return &MockContext_IsAborted_Call{Call: _e.mock.On("IsAborted")}
}

func (_c *MockContext_IsAborted_Call) Run(run func()) *MockContext_IsAborted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_IsAborted_Call) Return(_a0 bool) *MockContext_IsAborted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_IsAborted_Call) RunAndReturn(run func() bool) *MockContext_IsAborted_Call {
	_c.Call.Return(run)
	return _c
}

// IsWebsocket provides a mock function with no fields
func (_m *MockContext) IsWebsocket() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsWebsocket")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockContext_IsWebsocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWebsocket'
type MockContext_IsWebsocket_Call struct {
	*mock.Call
}

// IsWebsocket is a helper method to define mock.On call
func (_e *MockContext_Expecter) IsWebsocket() *MockContext_IsWebsocket_Call {
	return &MockContext_IsWebsocket_Call{Call: _e.mock.On("IsWebsocket")}
}

func (_c *MockContext_IsWebsocket_Call) Run(run func()) *MockContext_IsWebsocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_IsWebsocket_Call) Return(_a0 bool) *MockContext_IsWebsocket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_IsWebsocket_Call) RunAndReturn(run func() bool) *MockContext_IsWebsocket_Call {
	_c.Call.Return(run)
	return _c
}

// JSON provides a mock function with given fields: code, obj
func (_m *MockContext) JSON(code int, obj interface{}) {
	_m.Called(code, obj)
}

// MockContext_JSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSON'
type MockContext_JSON_Call struct {
	*mock.Call
}

// JSON is a helper method to define mock.On call
//   - code int
//   - obj interface{}
func (_e *MockContext_Expecter) JSON(code interface{}, obj interface{}) *MockContext_JSON_Call {
	return &MockContext_JSON_Call{Call: _e.mock.On("JSON", code, obj)}
}

func (_c *MockContext_JSON_Call) Run(run func(code int, obj interface{})) *MockContext_JSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *MockContext_JSON_Call) Return() *MockContext_JSON_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_JSON_Call) RunAndReturn(run func(int, interface{})) *MockContext_JSON_Call {
	_c.Run(run)
	return _c
}

// JSONP provides a mock function with given fields: code, callback, obj
func (_m *MockContext) JSONP(code int, callback string, obj interface{}) {
	_m.Called(code, callback, obj)
}

// MockContext_JSONP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONP'
type MockContext_JSONP_Call struct {
	*mock.Call
}

// JSONP is a helper method to define mock.On call
//   - code int
//   - callback string
//   - obj interface{}
func (_e *MockContext_Expecter) JSONP(code interface{}, callback interface{}, obj interface{}) *MockContext_JSONP_Call {
	return &MockContext_JSONP_Call{Call: _e.mock.On("JSONP", code, callback, obj)}
}

func (_c *MockContext_JSONP_Call) Run(run func(code int, callback string, obj interface{})) *MockContext_JSONP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockContext_JSONP_Call) Return() *MockContext_JSONP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_JSONP_Call) RunAndReturn(run func(int, string, interface{})) *MockContext_JSONP_Call {
	_c.Run(run)
	return _c
}

// Method provides a mock function with no fields
func (_m *MockContext) Method() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_Method_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Method'
type MockContext_Method_Call struct {
	*mock.Call
}

// Method is a helper method to define mock.On call
func (_e *MockContext_Expecter) Method() *MockContext_Method_Call {
	return &MockContext_Method_Call{Call: _e.mock.On("Method")}
}

func (_c *MockContext_Method_Call) Run(run func()) *MockContext_Method_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Method_Call) Return(_a0 string) *MockContext_Method_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Method_Call) RunAndReturn(run func() string) *MockContext_Method_Call {
	_c.Call.Return(run)
	return _c
}

// MultipartForm provides a mock function with no fields
func (_m *MockContext) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if rf, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockContext_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type MockContext_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *MockContext_Expecter) MultipartForm() *MockContext_MultipartForm_Call {
	return &MockContext_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *MockContext_MultipartForm_Call) Run(run func()) *MockContext_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_MultipartForm_Call) Return(_a0 *multipart.Form, _a1 error) *MockContext_MultipartForm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockContext_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *MockContext_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// Next provides a mock function with no fields
func (_m *MockContext) Next() {
	_m.Called()
}

// MockContext_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type MockContext_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *MockContext_Expecter) Next() *MockContext_Next_Call {
	return &MockContext_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *MockContext_Next_Call) Run(run func()) *MockContext_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Next_Call) Return() *MockContext_Next_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Next_Call) RunAndReturn(run func()) *MockContext_Next_Call {
	_c.Run(run)
	return _c
}

// Param provides a mock function with given fields: name
func (_m *MockContext) Param(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type MockContext_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) Param(name interface{}) *MockContext_Param_Call {
	return &MockContext_Param_Call{Call: _e.mock.On("Param", name)}
}

func (_c *MockContext_Param_Call) Run(run func(name string)) *MockContext_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_Param_Call) Return(_a0 string) *MockContext_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Param_Call) RunAndReturn(run func(string) string) *MockContext_Param_Call {
	_c.Call.Return(run)
	return _c
}

// ParamArray provides a mock function with given fields: name
func (_m *MockContext) ParamArray(name string) []string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ParamArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockContext_ParamArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamArray'
type MockContext_ParamArray_Call struct {
	*mock.Call
}

// ParamArray is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) ParamArray(name interface{}) *MockContext_ParamArray_Call {
	return &MockContext_ParamArray_Call{Call: _e.mock.On("ParamArray", name)}
}

func (_c *MockContext_ParamArray_Call) Run(run func(name string)) *MockContext_ParamArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_ParamArray_Call) Return(_a0 []string) *MockContext_ParamArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ParamArray_Call) RunAndReturn(run func(string) []string) *MockContext_ParamArray_Call {
	_c.Call.Return(run)
	return _c
}

// ParamMap provides a mock function with no fields
func (_m *MockContext) ParamMap() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParamMap")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockContext_ParamMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParamMap'
type MockContext_ParamMap_Call struct {
	*mock.Call
}

// ParamMap is a helper method to define mock.On call
func (_e *MockContext_Expecter) ParamMap() *MockContext_ParamMap_Call {
	return &MockContext_ParamMap_Call{Call: _e.mock.On("ParamMap")}
}

func (_c *MockContext_ParamMap_Call) Run(run func()) *MockContext_ParamMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_ParamMap_Call) Return(_a0 map[string]string) *MockContext_ParamMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ParamMap_Call) RunAndReturn(run func() map[string]string) *MockContext_ParamMap_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with no fields
func (_m *MockContext) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockContext_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockContext_Expecter) Path() *MockContext_Path_Call {
	return &MockContext_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockContext_Path_Call) Run(run func()) *MockContext_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Path_Call) Return(_a0 string) *MockContext_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Path_Call) RunAndReturn(run func() string) *MockContext_Path_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: name
func (_m *MockContext) Query(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockContext_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) Query(name interface{}) *MockContext_Query_Call {
	return &MockContext_Query_Call{Call: _e.mock.On("Query", name)}
}

func (_c *MockContext_Query_Call) Run(run func(name string)) *MockContext_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_Query_Call) Return(_a0 string) *MockContext_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Query_Call) RunAndReturn(run func(string) string) *MockContext_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryArray provides a mock function with given fields: name
func (_m *MockContext) QueryArray(name string) []string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for QueryArray")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockContext_QueryArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryArray'
type MockContext_QueryArray_Call struct {
	*mock.Call
}

// QueryArray is a helper method to define mock.On call
//   - name string
func (_e *MockContext_Expecter) QueryArray(name interface{}) *MockContext_QueryArray_Call {
	return &MockContext_QueryArray_Call{Call: _e.mock.On("QueryArray", name)}
}

func (_c *MockContext_QueryArray_Call) Run(run func(name string)) *MockContext_QueryArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_QueryArray_Call) Return(_a0 []string) *MockContext_QueryArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_QueryArray_Call) RunAndReturn(run func(string) []string) *MockContext_QueryArray_Call {
	_c.Call.Return(run)
	return _c
}

// QueryMap provides a mock function with given fields: prefix
func (_m *MockContext) QueryMap(prefix string) map[string]string {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for QueryMap")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(string) map[string]string); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// MockContext_QueryMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryMap'
type MockContext_QueryMap_Call struct {
	*mock.Call
}

// QueryMap is a helper method to define mock.On call
//   - prefix string
func (_e *MockContext_Expecter) QueryMap(prefix interface{}) *MockContext_QueryMap_Call {
	return &MockContext_QueryMap_Call{Call: _e.mock.On("QueryMap", prefix)}
}

func (_c *MockContext_QueryMap_Call) Run(run func(prefix string)) *MockContext_QueryMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockContext_QueryMap_Call) Return(_a0 map[string]string) *MockContext_QueryMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_QueryMap_Call) RunAndReturn(run func(string) map[string]string) *MockContext_QueryMap_Call {
	_c.Call.Return(run)
	return _c
}

// RawPath provides a mock function with no fields
func (_m *MockContext) RawPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RawPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockContext_RawPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawPath'
type MockContext_RawPath_Call struct {
	*mock.Call
}

// RawPath is a helper method to define mock.On call
func (_e *MockContext_Expecter) RawPath() *MockContext_RawPath_Call {
	return &MockContext_RawPath_Call{Call: _e.mock.On("RawPath")}
}

func (_c *MockContext_RawPath_Call) Run(run func()) *MockContext_RawPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_RawPath_Call) Return(_a0 string) *MockContext_RawPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_RawPath_Call) RunAndReturn(run func() string) *MockContext_RawPath_Call {
	_c.Call.Return(run)
	return _c
}

// Redirect provides a mock function with given fields: code, location
func (_m *MockContext) Redirect(code int, location string) {
	_m.Called(code, location)
}

// MockContext_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type MockContext_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - code int
//   - location string
func (_e *MockContext_Expecter) Redirect(code interface{}, location interface{}) *MockContext_Redirect_Call {
	return &MockContext_Redirect_Call{Call: _e.mock.On("Redirect", code, location)}
}

func (_c *MockContext_Redirect_Call) Run(run func(code int, location string)) *MockContext_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *MockContext_Redirect_Call) Return() *MockContext_Redirect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Redirect_Call) RunAndReturn(run func(int, string)) *MockContext_Redirect_Call {
	_c.Run(run)
	return _c
}

// RegisterValidation provides a mock function with given fields: tag, fn
func (_m *MockContext) RegisterValidation(tag string, fn validator.Func) error {
	ret := _m.Called(tag, fn)

	if len(ret) == 0 {
		panic("no return value specified for RegisterValidation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, validator.Func) error); ok {
		r0 = rf(tag, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_RegisterValidation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterValidation'
type MockContext_RegisterValidation_Call struct {
	*mock.Call
}

// RegisterValidation is a helper method to define mock.On call
//   - tag string
//   - fn validator.Func
func (_e *MockContext_Expecter) RegisterValidation(tag interface{}, fn interface{}) *MockContext_RegisterValidation_Call {
	return &MockContext_RegisterValidation_Call{Call: _e.mock.On("RegisterValidation", tag, fn)}
}

func (_c *MockContext_RegisterValidation_Call) Run(run func(tag string, fn validator.Func)) *MockContext_RegisterValidation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(validator.Func))
	})
	return _c
}

func (_c *MockContext_RegisterValidation_Call) Return(_a0 error) *MockContext_RegisterValidation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_RegisterValidation_Call) RunAndReturn(run func(string, validator.Func) error) *MockContext_RegisterValidation_Call {
	_c.Call.Return(run)
	return _c
}

// Render provides a mock function with given fields: code, name, data
func (_m *MockContext) Render(code int, name string, data interface{}) {
	_m.Called(code, name, data)
}

// MockContext_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type MockContext_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - code int
//   - name string
//   - data interface{}
func (_e *MockContext_Expecter) Render(code interface{}, name interface{}, data interface{}) *MockContext_Render_Call {
	return &MockContext_Render_Call{Call: _e.mock.On("Render", code, name, data)}
}

func (_c *MockContext_Render_Call) Run(run func(code int, name string, data interface{})) *MockContext_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockContext_Render_Call) Return() *MockContext_Render_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Render_Call) RunAndReturn(run func(int, string, interface{})) *MockContext_Render_Call {
	_c.Run(run)
	return _c
}

// Request provides a mock function with no fields
func (_m *MockContext) Request() context.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 context.Request
	if rf, ok := ret.Get(0).(func() context.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Request)
		}
	}

	return r0
}

// MockContext_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockContext_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *MockContext_Expecter) Request() *MockContext_Request_Call {
	return &MockContext_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *MockContext_Request_Call) Run(run func()) *MockContext_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Request_Call) Return(_a0 context.Request) *MockContext_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Request_Call) RunAndReturn(run func() context.Request) *MockContext_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Response provides a mock function with no fields
func (_m *MockContext) Response() context.Response {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Response")
	}

	var r0 context.Response
	if rf, ok := ret.Get(0).(func() context.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Response)
		}
	}

	return r0
}

// MockContext_Response_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Response'
type MockContext_Response_Call struct {
	*mock.Call
}

// Response is a helper method to define mock.On call
func (_e *MockContext_Expecter) Response() *MockContext_Response_Call {
	return &MockContext_Response_Call{Call: _e.mock.On("Response")}
}

func (_c *MockContext_Response_Call) Run(run func()) *MockContext_Response_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Response_Call) Return(_a0 context.Response) *MockContext_Response_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_Response_Call) RunAndReturn(run func() context.Response) *MockContext_Response_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUploadedFile provides a mock function with given fields: file, dst
func (_m *MockContext) SaveUploadedFile(file *multipart.FileHeader, dst string) error {
	ret := _m.Called(file, dst)

	if len(ret) == 0 {
		panic("no return value specified for SaveUploadedFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) error); ok {
		r0 = rf(file, dst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_SaveUploadedFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUploadedFile'
type MockContext_SaveUploadedFile_Call struct {
	*mock.Call
}

// SaveUploadedFile is a helper method to define mock.On call
//   - file *multipart.FileHeader
//   - dst string
func (_e *MockContext_Expecter) SaveUploadedFile(file interface{}, dst interface{}) *MockContext_SaveUploadedFile_Call {
	return &MockContext_SaveUploadedFile_Call{Call: _e.mock.On("SaveUploadedFile", file, dst)}
}

func (_c *MockContext_SaveUploadedFile_Call) Run(run func(file *multipart.FileHeader, dst string)) *MockContext_SaveUploadedFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*multipart.FileHeader), args[1].(string))
	})
	return _c
}

func (_c *MockContext_SaveUploadedFile_Call) Return(_a0 error) *MockContext_SaveUploadedFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_SaveUploadedFile_Call) RunAndReturn(run func(*multipart.FileHeader, string) error) *MockContext_SaveUploadedFile_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *MockContext) Set(key string, value interface{}) {
	_m.Called(key, value)
}

// MockContext_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockContext_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockContext_Expecter) Set(key interface{}, value interface{}) *MockContext_Set_Call {
	return &MockContext_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockContext_Set_Call) Run(run func(key string, value interface{})) *MockContext_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockContext_Set_Call) Return() *MockContext_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Set_Call) RunAndReturn(run func(string, interface{})) *MockContext_Set_Call {
	_c.Run(run)
	return _c
}

// SetCookie provides a mock function with given fields: name, value, maxAge, path, domain, secure, httpOnly
func (_m *MockContext) SetCookie(name string, value string, maxAge int, path string, domain string, secure bool, httpOnly bool) {
	_m.Called(name, value, maxAge, path, domain, secure, httpOnly)
}

// MockContext_SetCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookie'
type MockContext_SetCookie_Call struct {
	*mock.Call
}

// SetCookie is a helper method to define mock.On call
//   - name string
//   - value string
//   - maxAge int
//   - path string
//   - domain string
//   - secure bool
//   - httpOnly bool
func (_e *MockContext_Expecter) SetCookie(name interface{}, value interface{}, maxAge interface{}, path interface{}, domain interface{}, secure interface{}, httpOnly interface{}) *MockContext_SetCookie_Call {
	return &MockContext_SetCookie_Call{Call: _e.mock.On("SetCookie", name, value, maxAge, path, domain, secure, httpOnly)}
}

func (_c *MockContext_SetCookie_Call) Run(run func(name string, value string, maxAge int, path string, domain string, secure bool, httpOnly bool)) *MockContext_SetCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(string), args[4].(string), args[5].(bool), args[6].(bool))
	})
	return _c
}

func (_c *MockContext_SetCookie_Call) Return() *MockContext_SetCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_SetCookie_Call) RunAndReturn(run func(string, string, int, string, string, bool, bool)) *MockContext_SetCookie_Call {
	_c.Run(run)
	return _c
}

// SetHandlers provides a mock function with given fields: handlers
func (_m *MockContext) SetHandlers(handlers []func(context.Context)) {
	_m.Called(handlers)
}

// MockContext_SetHandlers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandlers'
type MockContext_SetHandlers_Call struct {
	*mock.Call
}

// SetHandlers is a helper method to define mock.On call
//   - handlers []func(context.Context)
func (_e *MockContext_Expecter) SetHandlers(handlers interface{}) *MockContext_SetHandlers_Call {
	return &MockContext_SetHandlers_Call{Call: _e.mock.On("SetHandlers", handlers)}
}

func (_c *MockContext_SetHandlers_Call) Run(run func(handlers []func(context.Context))) *MockContext_SetHandlers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]func(context.Context)))
	})
	return _c
}

func (_c *MockContext_SetHandlers_Call) Return() *MockContext_SetHandlers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_SetHandlers_Call) RunAndReturn(run func([]func(context.Context))) *MockContext_SetHandlers_Call {
	_c.Run(run)
	return _c
}

// ShouldBind provides a mock function with given fields: obj
func (_m *MockContext) ShouldBind(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ShouldBind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_ShouldBind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldBind'
type MockContext_ShouldBind_Call struct {
	*mock.Call
}

// ShouldBind is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) ShouldBind(obj interface{}) *MockContext_ShouldBind_Call {
	return &MockContext_ShouldBind_Call{Call: _e.mock.On("ShouldBind", obj)}
}

func (_c *MockContext_ShouldBind_Call) Run(run func(obj interface{})) *MockContext_ShouldBind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_ShouldBind_Call) Return(_a0 error) *MockContext_ShouldBind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ShouldBind_Call) RunAndReturn(run func(interface{}) error) *MockContext_ShouldBind_Call {
	_c.Call.Return(run)
	return _c
}

// ShouldBindAndValidate provides a mock function with given fields: obj
func (_m *MockContext) ShouldBindAndValidate(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ShouldBindAndValidate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_ShouldBindAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldBindAndValidate'
type MockContext_ShouldBindAndValidate_Call struct {
	*mock.Call
}

// ShouldBindAndValidate is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) ShouldBindAndValidate(obj interface{}) *MockContext_ShouldBindAndValidate_Call {
	return &MockContext_ShouldBindAndValidate_Call{Call: _e.mock.On("ShouldBindAndValidate", obj)}
}

func (_c *MockContext_ShouldBindAndValidate_Call) Run(run func(obj interface{})) *MockContext_ShouldBindAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_ShouldBindAndValidate_Call) Return(_a0 error) *MockContext_ShouldBindAndValidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ShouldBindAndValidate_Call) RunAndReturn(run func(interface{}) error) *MockContext_ShouldBindAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: code
func (_m *MockContext) Status(code int) {
	_m.Called(code)
}

// MockContext_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockContext_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - code int
func (_e *MockContext_Expecter) Status(code interface{}) *MockContext_Status_Call {
	return &MockContext_Status_Call{Call: _e.mock.On("Status", code)}
}

func (_c *MockContext_Status_Call) Run(run func(code int)) *MockContext_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockContext_Status_Call) Return() *MockContext_Status_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Status_Call) RunAndReturn(run func(int)) *MockContext_Status_Call {
	_c.Run(run)
	return _c
}

// Stream provides a mock function with given fields: code, contentType, r
func (_m *MockContext) Stream(code int, contentType string, r io.Reader) {
	_m.Called(code, contentType, r)
}

// MockContext_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type MockContext_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - code int
//   - contentType string
//   - r io.Reader
func (_e *MockContext_Expecter) Stream(code interface{}, contentType interface{}, r interface{}) *MockContext_Stream_Call {
	return &MockContext_Stream_Call{Call: _e.mock.On("Stream", code, contentType, r)}
}

func (_c *MockContext_Stream_Call) Run(run func(code int, contentType string, r io.Reader)) *MockContext_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string), args[2].(io.Reader))
	})
	return _c
}

func (_c *MockContext_Stream_Call) Return() *MockContext_Stream_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_Stream_Call) RunAndReturn(run func(int, string, io.Reader)) *MockContext_Stream_Call {
	_c.Run(run)
	return _c
}

// String provides a mock function with given fields: code, format, values
func (_m *MockContext) String(code int, format string, values ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, code, format)
	_ca = append(_ca, values...)
	_m.Called(_ca...)
}

// MockContext_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockContext_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - code int
//   - format string
//   - values ...interface{}
func (_e *MockContext_Expecter) String(code interface{}, format interface{}, values ...interface{}) *MockContext_String_Call {
	return &MockContext_String_Call{Call: _e.mock.On("String",
		append([]interface{}{code, format}, values...)...)}
}

func (_c *MockContext_String_Call) Run(run func(code int, format string, values ...interface{})) *MockContext_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(int), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockContext_String_Call) Return() *MockContext_String_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_String_Call) RunAndReturn(run func(int, string, ...interface{})) *MockContext_String_Call {
	_c.Run(run)
	return _c
}

// ValidateStruct provides a mock function with given fields: obj
func (_m *MockContext) ValidateStruct(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for ValidateStruct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockContext_ValidateStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStruct'
type MockContext_ValidateStruct_Call struct {
	*mock.Call
}

// ValidateStruct is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockContext_Expecter) ValidateStruct(obj interface{}) *MockContext_ValidateStruct_Call {
	return &MockContext_ValidateStruct_Call{Call: _e.mock.On("ValidateStruct", obj)}
}

func (_c *MockContext_ValidateStruct_Call) Run(run func(obj interface{})) *MockContext_ValidateStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockContext_ValidateStruct_Call) Return(_a0 error) *MockContext_ValidateStruct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_ValidateStruct_Call) RunAndReturn(run func(interface{}) error) *MockContext_ValidateStruct_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *MockContext) WithContext(ctx context2.Context) context.Context {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context2.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockContext_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type MockContext_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context2.Context
func (_e *MockContext_Expecter) WithContext(ctx interface{}) *MockContext_WithContext_Call {
	return &MockContext_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *MockContext_WithContext_Call) Run(run func(ctx context2.Context)) *MockContext_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context2.Context))
	})
	return _c
}

func (_c *MockContext_WithContext_Call) Return(_a0 context.Context) *MockContext_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockContext_WithContext_Call) RunAndReturn(run func(context2.Context) context.Context) *MockContext_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// XML provides a mock function with given fields: code, obj
func (_m *MockContext) XML(code int, obj interface{}) {
	_m.Called(code, obj)
}

// MockContext_XML_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XML'
type MockContext_XML_Call struct {
	*mock.Call
}

// XML is a helper method to define mock.On call
//   - code int
//   - obj interface{}
func (_e *MockContext_Expecter) XML(code interface{}, obj interface{}) *MockContext_XML_Call {
	return &MockContext_XML_Call{Call: _e.mock.On("XML", code, obj)}
}

func (_c *MockContext_XML_Call) Run(run func(code int, obj interface{})) *MockContext_XML_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(interface{}))
	})
	return _c
}

func (_c *MockContext_XML_Call) Return() *MockContext_XML_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockContext_XML_Call) RunAndReturn(run func(int, interface{})) *MockContext_XML_Call {
	_c.Run(run)
	return _c
}

// NewMockContext creates a new instance of MockContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContext {
	mock := &MockContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
