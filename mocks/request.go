// Code generated by mockery. DO NOT EDIT.

package fork_mocks

import (
	io "io"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	url "net/url"
)

// MockRequest is an autogenerated mock type for the Request type
type MockRequest struct {
	mock.Mock
}

type MockRequest_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequest) EXPECT() *MockRequest_Expecter {
	return &MockRequest_Expecter{mock: &_m.Mock}
}

// Body provides a mock function with no fields
func (_m *MockRequest) Body() io.ReadCloser {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func() io.ReadCloser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	return r0
}

// MockRequest_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockRequest_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Body() *MockRequest_Body_Call {
	return &MockRequest_Body_Call{Call: _e.mock.On("Body")}
}

func (_c *MockRequest_Body_Call) Run(run func()) *MockRequest_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Body_Call) Return(_a0 io.ReadCloser) *MockRequest_Body_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Body_Call) RunAndReturn(run func() io.ReadCloser) *MockRequest_Body_Call {
	_c.Call.Return(run)
	return _c
}

// ContentLength provides a mock function with no fields
func (_m *MockRequest) ContentLength() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ContentLength")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockRequest_ContentLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContentLength'
type MockRequest_ContentLength_Call struct {
	*mock.Call
}

// ContentLength is a helper method to define mock.On call
func (_e *MockRequest_Expecter) ContentLength() *MockRequest_ContentLength_Call {
	return &MockRequest_ContentLength_Call{Call: _e.mock.On("ContentLength")}
}

func (_c *MockRequest_ContentLength_Call) Run(run func()) *MockRequest_ContentLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_ContentLength_Call) Return(_a0 int64) *MockRequest_ContentLength_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_ContentLength_Call) RunAndReturn(run func() int64) *MockRequest_ContentLength_Call {
	_c.Call.Return(run)
	return _c
}

// Cookie provides a mock function with given fields: name
func (_m *MockRequest) Cookie(name string) (*http.Cookie, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Cookie")
	}

	var r0 *http.Cookie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*http.Cookie, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *http.Cookie); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Cookie)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequest_Cookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookie'
type MockRequest_Cookie_Call struct {
	*mock.Call
}

// Cookie is a helper method to define mock.On call
//   - name string
func (_e *MockRequest_Expecter) Cookie(name interface{}) *MockRequest_Cookie_Call {
	return &MockRequest_Cookie_Call{Call: _e.mock.On("Cookie", name)}
}

func (_c *MockRequest_Cookie_Call) Run(run func(name string)) *MockRequest_Cookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRequest_Cookie_Call) Return(_a0 *http.Cookie, _a1 error) *MockRequest_Cookie_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequest_Cookie_Call) RunAndReturn(run func(string) (*http.Cookie, error)) *MockRequest_Cookie_Call {
	_c.Call.Return(run)
	return _c
}

// Cookies provides a mock function with no fields
func (_m *MockRequest) Cookies() []*http.Cookie {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cookies")
	}

	var r0 []*http.Cookie
	if rf, ok := ret.Get(0).(func() []*http.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*http.Cookie)
		}
	}

	return r0
}

// MockRequest_Cookies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cookies'
type MockRequest_Cookies_Call struct {
	*mock.Call
}

// Cookies is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Cookies() *MockRequest_Cookies_Call {
	return &MockRequest_Cookies_Call{Call: _e.mock.On("Cookies")}
}

func (_c *MockRequest_Cookies_Call) Run(run func()) *MockRequest_Cookies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Cookies_Call) Return(_a0 []*http.Cookie) *MockRequest_Cookies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Cookies_Call) RunAndReturn(run func() []*http.Cookie) *MockRequest_Cookies_Call {
	_c.Call.Return(run)
	return _c
}

// Form provides a mock function with no fields
func (_m *MockRequest) Form() url.Values {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Form")
	}

	var r0 url.Values
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	return r0
}

// MockRequest_Form_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Form'
type MockRequest_Form_Call struct {
	*mock.Call
}

// Form is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Form() *MockRequest_Form_Call {
	return &MockRequest_Form_Call{Call: _e.mock.On("Form")}
}

func (_c *MockRequest_Form_Call) Run(run func()) *MockRequest_Form_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Form_Call) Return(_a0 url.Values) *MockRequest_Form_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Form_Call) RunAndReturn(run func() url.Values) *MockRequest_Form_Call {
	_c.Call.Return(run)
	return _c
}

// FormFile provides a mock function with given fields: name
func (_m *MockRequest) FormFile(name string) (*multipart.FileHeader, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormFile")
	}

	var r0 *multipart.FileHeader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*multipart.FileHeader, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequest_FormFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormFile'
type MockRequest_FormFile_Call struct {
	*mock.Call
}

// FormFile is a helper method to define mock.On call
//   - name string
func (_e *MockRequest_Expecter) FormFile(name interface{}) *MockRequest_FormFile_Call {
	return &MockRequest_FormFile_Call{Call: _e.mock.On("FormFile", name)}
}

func (_c *MockRequest_FormFile_Call) Run(run func(name string)) *MockRequest_FormFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRequest_FormFile_Call) Return(_a0 *multipart.FileHeader, _a1 error) *MockRequest_FormFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequest_FormFile_Call) RunAndReturn(run func(string) (*multipart.FileHeader, error)) *MockRequest_FormFile_Call {
	_c.Call.Return(run)
	return _c
}

// FormValue provides a mock function with given fields: name
func (_m *MockRequest) FormValue(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for FormValue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_FormValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormValue'
type MockRequest_FormValue_Call struct {
	*mock.Call
}

// FormValue is a helper method to define mock.On call
//   - name string
func (_e *MockRequest_Expecter) FormValue(name interface{}) *MockRequest_FormValue_Call {
	return &MockRequest_FormValue_Call{Call: _e.mock.On("FormValue", name)}
}

func (_c *MockRequest_FormValue_Call) Run(run func(name string)) *MockRequest_FormValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRequest_FormValue_Call) Return(_a0 string) *MockRequest_FormValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_FormValue_Call) RunAndReturn(run func(string) string) *MockRequest_FormValue_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with no fields
func (_m *MockRequest) Header() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockRequest_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockRequest_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Header() *MockRequest_Header_Call {
	return &MockRequest_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockRequest_Header_Call) Run(run func()) *MockRequest_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Header_Call) Return(_a0 http.Header) *MockRequest_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Header_Call) RunAndReturn(run func() http.Header) *MockRequest_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Host provides a mock function with no fields
func (_m *MockRequest) Host() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_Host_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Host'
type MockRequest_Host_Call struct {
	*mock.Call
}

// Host is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Host() *MockRequest_Host_Call {
	return &MockRequest_Host_Call{Call: _e.mock.On("Host")}
}

func (_c *MockRequest_Host_Call) Run(run func()) *MockRequest_Host_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Host_Call) Return(_a0 string) *MockRequest_Host_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Host_Call) RunAndReturn(run func() string) *MockRequest_Host_Call {
	_c.Call.Return(run)
	return _c
}

// IsSecure provides a mock function with no fields
func (_m *MockRequest) IsSecure() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSecure")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockRequest_IsSecure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSecure'
type MockRequest_IsSecure_Call struct {
	*mock.Call
}

// IsSecure is a helper method to define mock.On call
func (_e *MockRequest_Expecter) IsSecure() *MockRequest_IsSecure_Call {
	return &MockRequest_IsSecure_Call{Call: _e.mock.On("IsSecure")}
}

func (_c *MockRequest_IsSecure_Call) Run(run func()) *MockRequest_IsSecure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_IsSecure_Call) Return(_a0 bool) *MockRequest_IsSecure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_IsSecure_Call) RunAndReturn(run func() bool) *MockRequest_IsSecure_Call {
	_c.Call.Return(run)
	return _c
}

// Method provides a mock function with no fields
func (_m *MockRequest) Method() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_Method_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Method'
type MockRequest_Method_Call struct {
	*mock.Call
}

// Method is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Method() *MockRequest_Method_Call {
	return &MockRequest_Method_Call{Call: _e.mock.On("Method")}
}

func (_c *MockRequest_Method_Call) Run(run func()) *MockRequest_Method_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Method_Call) Return(_a0 string) *MockRequest_Method_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Method_Call) RunAndReturn(run func() string) *MockRequest_Method_Call {
	_c.Call.Return(run)
	return _c
}

// MultipartForm provides a mock function with no fields
func (_m *MockRequest) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MultipartForm")
	}

	var r0 *multipart.Form
	var r1 error
	if rf, ok := ret.Get(0).(func() (*multipart.Form, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequest_MultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultipartForm'
type MockRequest_MultipartForm_Call struct {
	*mock.Call
}

// MultipartForm is a helper method to define mock.On call
func (_e *MockRequest_Expecter) MultipartForm() *MockRequest_MultipartForm_Call {
	return &MockRequest_MultipartForm_Call{Call: _e.mock.On("MultipartForm")}
}

func (_c *MockRequest_MultipartForm_Call) Run(run func()) *MockRequest_MultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_MultipartForm_Call) Return(_a0 *multipart.Form, _a1 error) *MockRequest_MultipartForm_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRequest_MultipartForm_Call) RunAndReturn(run func() (*multipart.Form, error)) *MockRequest_MultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// ParseForm provides a mock function with no fields
func (_m *MockRequest) ParseForm() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ParseForm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequest_ParseForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseForm'
type MockRequest_ParseForm_Call struct {
	*mock.Call
}

// ParseForm is a helper method to define mock.On call
func (_e *MockRequest_Expecter) ParseForm() *MockRequest_ParseForm_Call {
	return &MockRequest_ParseForm_Call{Call: _e.mock.On("ParseForm")}
}

func (_c *MockRequest_ParseForm_Call) Run(run func()) *MockRequest_ParseForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_ParseForm_Call) Return(_a0 error) *MockRequest_ParseForm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_ParseForm_Call) RunAndReturn(run func() error) *MockRequest_ParseForm_Call {
	_c.Call.Return(run)
	return _c
}

// ParseMultipartForm provides a mock function with given fields: maxMemory
func (_m *MockRequest) ParseMultipartForm(maxMemory int64) error {
	ret := _m.Called(maxMemory)

	if len(ret) == 0 {
		panic("no return value specified for ParseMultipartForm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(maxMemory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequest_ParseMultipartForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseMultipartForm'
type MockRequest_ParseMultipartForm_Call struct {
	*mock.Call
}

// ParseMultipartForm is a helper method to define mock.On call
//   - maxMemory int64
func (_e *MockRequest_Expecter) ParseMultipartForm(maxMemory interface{}) *MockRequest_ParseMultipartForm_Call {
	return &MockRequest_ParseMultipartForm_Call{Call: _e.mock.On("ParseMultipartForm", maxMemory)}
}

func (_c *MockRequest_ParseMultipartForm_Call) Run(run func(maxMemory int64)) *MockRequest_ParseMultipartForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockRequest_ParseMultipartForm_Call) Return(_a0 error) *MockRequest_ParseMultipartForm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_ParseMultipartForm_Call) RunAndReturn(run func(int64) error) *MockRequest_ParseMultipartForm_Call {
	_c.Call.Return(run)
	return _c
}

// PostForm provides a mock function with no fields
func (_m *MockRequest) PostForm() url.Values {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PostForm")
	}

	var r0 url.Values
	if rf, ok := ret.Get(0).(func() url.Values); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	return r0
}

// MockRequest_PostForm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostForm'
type MockRequest_PostForm_Call struct {
	*mock.Call
}

// PostForm is a helper method to define mock.On call
func (_e *MockRequest_Expecter) PostForm() *MockRequest_PostForm_Call {
	return &MockRequest_PostForm_Call{Call: _e.mock.On("PostForm")}
}

func (_c *MockRequest_PostForm_Call) Run(run func()) *MockRequest_PostForm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_PostForm_Call) Return(_a0 url.Values) *MockRequest_PostForm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_PostForm_Call) RunAndReturn(run func() url.Values) *MockRequest_PostForm_Call {
	_c.Call.Return(run)
	return _c
}

// PostFormValue provides a mock function with given fields: name
func (_m *MockRequest) PostFormValue(name string) string {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for PostFormValue")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_PostFormValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostFormValue'
type MockRequest_PostFormValue_Call struct {
	*mock.Call
}

// PostFormValue is a helper method to define mock.On call
//   - name string
func (_e *MockRequest_Expecter) PostFormValue(name interface{}) *MockRequest_PostFormValue_Call {
	return &MockRequest_PostFormValue_Call{Call: _e.mock.On("PostFormValue", name)}
}

func (_c *MockRequest_PostFormValue_Call) Run(run func(name string)) *MockRequest_PostFormValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRequest_PostFormValue_Call) Return(_a0 string) *MockRequest_PostFormValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_PostFormValue_Call) RunAndReturn(run func(string) string) *MockRequest_PostFormValue_Call {
	_c.Call.Return(run)
	return _c
}

// Protocol provides a mock function with no fields
func (_m *MockRequest) Protocol() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Protocol")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_Protocol_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Protocol'
type MockRequest_Protocol_Call struct {
	*mock.Call
}

// Protocol is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Protocol() *MockRequest_Protocol_Call {
	return &MockRequest_Protocol_Call{Call: _e.mock.On("Protocol")}
}

func (_c *MockRequest_Protocol_Call) Run(run func()) *MockRequest_Protocol_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Protocol_Call) Return(_a0 string) *MockRequest_Protocol_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Protocol_Call) RunAndReturn(run func() string) *MockRequest_Protocol_Call {
	_c.Call.Return(run)
	return _c
}

// Referer provides a mock function with no fields
func (_m *MockRequest) Referer() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Referer")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_Referer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Referer'
type MockRequest_Referer_Call struct {
	*mock.Call
}

// Referer is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Referer() *MockRequest_Referer_Call {
	return &MockRequest_Referer_Call{Call: _e.mock.On("Referer")}
}

func (_c *MockRequest_Referer_Call) Run(run func()) *MockRequest_Referer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Referer_Call) Return(_a0 string) *MockRequest_Referer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Referer_Call) RunAndReturn(run func() string) *MockRequest_Referer_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteAddr provides a mock function with no fields
func (_m *MockRequest) RemoteAddr() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteAddr")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_RemoteAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteAddr'
type MockRequest_RemoteAddr_Call struct {
	*mock.Call
}

// RemoteAddr is a helper method to define mock.On call
func (_e *MockRequest_Expecter) RemoteAddr() *MockRequest_RemoteAddr_Call {
	return &MockRequest_RemoteAddr_Call{Call: _e.mock.On("RemoteAddr")}
}

func (_c *MockRequest_RemoteAddr_Call) Run(run func()) *MockRequest_RemoteAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_RemoteAddr_Call) Return(_a0 string) *MockRequest_RemoteAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_RemoteAddr_Call) RunAndReturn(run func() string) *MockRequest_RemoteAddr_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with no fields
func (_m *MockRequest) Request() *http.Request {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// MockRequest_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type MockRequest_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Request() *MockRequest_Request_Call {
	return &MockRequest_Request_Call{Call: _e.mock.On("Request")}
}

func (_c *MockRequest_Request_Call) Run(run func()) *MockRequest_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Request_Call) Return(_a0 *http.Request) *MockRequest_Request_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Request_Call) RunAndReturn(run func() *http.Request) *MockRequest_Request_Call {
	_c.Call.Return(run)
	return _c
}

// RequestURI provides a mock function with no fields
func (_m *MockRequest) RequestURI() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequestURI")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_RequestURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestURI'
type MockRequest_RequestURI_Call struct {
	*mock.Call
}

// RequestURI is a helper method to define mock.On call
func (_e *MockRequest_Expecter) RequestURI() *MockRequest_RequestURI_Call {
	return &MockRequest_RequestURI_Call{Call: _e.mock.On("RequestURI")}
}

func (_c *MockRequest_RequestURI_Call) Run(run func()) *MockRequest_RequestURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_RequestURI_Call) Return(_a0 string) *MockRequest_RequestURI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_RequestURI_Call) RunAndReturn(run func() string) *MockRequest_RequestURI_Call {
	_c.Call.Return(run)
	return _c
}

// Scheme provides a mock function with no fields
func (_m *MockRequest) Scheme() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type MockRequest_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *MockRequest_Expecter) Scheme() *MockRequest_Scheme_Call {
	return &MockRequest_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *MockRequest_Scheme_Call) Run(run func()) *MockRequest_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_Scheme_Call) Return(_a0 string) *MockRequest_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_Scheme_Call) RunAndReturn(run func() string) *MockRequest_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with no fields
func (_m *MockRequest) URL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// MockRequest_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type MockRequest_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
func (_e *MockRequest_Expecter) URL() *MockRequest_URL_Call {
	return &MockRequest_URL_Call{Call: _e.mock.On("URL")}
}

func (_c *MockRequest_URL_Call) Run(run func()) *MockRequest_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_URL_Call) Return(_a0 *url.URL) *MockRequest_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_URL_Call) RunAndReturn(run func() *url.URL) *MockRequest_URL_Call {
	_c.Call.Return(run)
	return _c
}

// UserAgent provides a mock function with no fields
func (_m *MockRequest) UserAgent() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserAgent")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockRequest_UserAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserAgent'
type MockRequest_UserAgent_Call struct {
	*mock.Call
}

// UserAgent is a helper method to define mock.On call
func (_e *MockRequest_Expecter) UserAgent() *MockRequest_UserAgent_Call {
	return &MockRequest_UserAgent_Call{Call: _e.mock.On("UserAgent")}
}

func (_c *MockRequest_UserAgent_Call) Run(run func()) *MockRequest_UserAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRequest_UserAgent_Call) Return(_a0 string) *MockRequest_UserAgent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequest_UserAgent_Call) RunAndReturn(run func() string) *MockRequest_UserAgent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequest creates a new instance of MockRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequest {
	mock := &MockRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
